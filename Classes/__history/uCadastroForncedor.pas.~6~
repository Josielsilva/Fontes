unit uCadastroForncedor;

interface

uses System.Classes,
     Vcl.Controls,
     Vcl.ExtCtrls,
     Vcl.Dialogs,
     ZAbstractConnection,
     ZConnection,
     ZAbstractRODataset,
     ZAbstractDataset,
     ZDataset,
     System.SysUtils;

type
  TFornecedor = class
  private
    ConexaoDB:TZConnection;
    F_clienteId:Integer;  //Int
    F_nome:String; //VarChar
    F_endereco: string;
    F_cidade:String;
    F_bairro: String;
    F_estado: string;
    F_cep: String;
    F_telefone1: string;
    F_email: string;
    F_telefone2: string;
    F_CNPJ: string;
    F_RazaoSocial: string;
    F_Fantasia: string;
    F_CodEmpresa: Integer;
    F_Numero :Integer;
    public
    constructor Create(aConexao:TZConnection);
    destructor Destroy; override;
    function Inserir:Boolean;
    function Atualizar:Boolean;
    function Apagar:Boolean;
    function Selecionar(id:Integer):Boolean;
  published
    property CodFornecedor :Integer    read F_CodEmpresa     write F_CodEmpresa;
    property CNPJ          :string     read F_CNPJ           write F_CNPJ;
    property RazaoSocial   :string     read F_RazaoSocial    write F_RazaoSocial;
    property Fantasia      :string     read F_Fantasia       write F_Fantasia;
    property endereco      :string     read F_endereco       write F_endereco;
    property cidade        :string     read F_cidade         write F_cidade;
    property bairro        :string     read F_bairro         write F_bairro;
    property estado        :string     read F_estado         write F_Estado;
    property cep           :string     read F_cep            write F_Cep;
    property telefone1     :string     read F_telefone1      write F_telefone1;
    property telefone2     :string     read F_telefone2      write F_telefone2;
    property Numero        :Integer    read F_Numero         write F_Numero;
    property Nome          :string     read F_nome           write F_nome;
    property Email         :string     read F_email          write F_email;

  end;

implementation


{ TCategoria }

{$region 'Constructor and Destructor'}
constructor TFornecedor.Create(aConexao:TZConnection);
begin
  ConexaoDB:=aConexao;
end;

destructor TFornecedor.Destroy;
begin

  inherited;
end;
{$endRegion}

{$region 'CRUD'}
function TFornecedor.Apagar: Boolean;
var Qry:TZQuery;
begin
  if MessageDlg('Apagar o Registro: '+#13+#13+
                'Código: '+IntToStr(F_CodEmpresa)+#13+
                'Descrição: '+F_nome,mtConfirmation,[mbYes, mbNo],0)=mrNo then begin
     Result:=false;
     abort;
  end;

  try
    Result:=true;
    Qry:=TZQuery.Create(nil);
    Qry.Connection:=ConexaoDB;
    Qry.SQL.Clear;
    Qry.SQL.Add('DELETE FROM FORNECEDOR '+
                ' WHERE FORN_cod=:FORN_Cod ');
    Qry.ParamByName('FORN_Cod').AsInteger :=CodFornecedor;
    Try
      ConexaoDB.StartTransaction;
      Qry.ExecSQL;
      ConexaoDB.Commit;
    Except
      ConexaoDB.Rollback;
      Result:=false;
    End;

  finally
    if Assigned(Qry) then
       FreeAndNil(Qry);
  end;
end;

function TFornecedor.Atualizar: Boolean;
var Qry:TZQuery;
begin
  try
    Result:=true;
    Qry:=TZQuery.Create(nil);
    Qry.Connection:=ConexaoDB;
    Qry.SQL.Clear;
    Qry.SQL.Add('UPDATE FORNECEDOR '+
                '   SET  Forn_RAZAOSOCIAL    =:RAZAO     '+
                '       ,FORN_FANTASIA       =:FANTASIA  '+
                '       ,FORN_ENDERECO       =:endereco  '+
                '       ,FORN_Cidade         =:cidade    '+
                '       ,FORN_Bairro         =:bairro    '+
                '       ,FORN_UF             =:estado    '+
                '       ,FORN_Cep            =:cep       '+
                '       ,FORN_Telefone1      =:telefone1 '+
                '       ,FORN_Telefone2      =:telefone2 '+
                '       ,FORN_Email          =:email     '+
                '       ,FORN_Numero         =:Numero    '+
                '       ,FORN_Nome           =:Nome      '+
                '       ,Forn_Email          =:Email     '+
                '       ,Forn_Cnpj           =:Cnpj      '+
                ' WHERE FORN_Cod=:FORN_Cod ');
    Qry.ParamByName('FORN_COD').AsInteger        :=Self.F_CodEmpresa;
    Qry.ParamByName('RAZAO').AsString           :=Self.F_RazaoSocial;
    Qry.ParamByName('FANTASIA').AsString        :=Self.Fantasia;
    Qry.ParamByName('endereco').AsString        :=Self.F_endereco;
    Qry.ParamByName('cidade').AsString          :=Self.F_cidade;
    Qry.ParamByName('bairro').AsString          :=Self.F_bairro;
    Qry.ParamByName('estado').AsString          :=Self.F_estado;
    Qry.ParamByName('cep').AsString             :=Self.F_cep;
    Qry.ParamByName('telefone1').AsString       :=Self.F_telefone1;
    Qry.ParamByName('telefone2').AsString       :=Self.F_telefone2;
    Qry.ParamByName('email').AsString           :=Self.F_email;
    Qry.ParamByName('numeo').AsInteger          :=Self.F_Numero;
    Qry.ParamByName('nome').AsString            :=Self.F_Nome;
    Qry.ParamByName('Email').AsString           :=Self.Email;
    Qry.ParamByName('Cnpj').AsString            :=Self.Cnpj;


    Try
      ConexaoDB.StartTransaction;
      Qry.ExecSQL;
      ConexaoDB.Commit;
    Except
      ConexaoDB.Rollback;
      Result:=false;
    End;

  finally
    if Assigned(Qry) then
       FreeAndNil(Qry);
  end;
end;

function TFornecedor.Inserir: Boolean;
var Qry:TZQuery;
begin
  try
     Result:=true;
    Qry:=TZQuery.Create(nil);
    Qry.Connection:=ConexaoDB;
    Qry.SQL.Clear;
    Qry.SQL.Add('INSERT INTO FORNECEDOR (                    '+
                                 '         Forn_RAZAOSOCIAL      '+
                                 '        ,FORN_FANTASIA     '+
                                 '        ,FORN_ENDERECO     '+
                                 '        ,FORN_Cidade       '+
                                 '        ,FORN_Bairro       '+
                                 '        ,FORN_UF           '+
                                 '        ,FORN_Cep          '+
                                 '        ,FORN_Telefone1    '+
                                 '        ,FORN_Telefone2    '+
                                 '        ,FORN_Nome        '+
                                 '        ,FORN_NUMERO       '+
                                 '        ,FORN_EMAIL        '+
                                 '        ,FORN_CNPJ)         '+
                          'values(                          '+
                                 '     :RAZAO,     '+
                                 '     :FANTASIA,  '+
                                 '     :endereco,  '+
                                 '     :cidade,    '+
                                 '     :bairro,    '+
                                 '     :estado,    '+
                                 '     :cep,       '+
                                 '     :telefone1, '+
                                 '     :telefone2, '+
                                 '     :Nome,     '+
                                 '     :numero,   '+
                                 '     :email,    '+
                                 '     :cnpj)    ');
    Qry.ParamByName('Razao').AsString            :=Self.F_RazaoSocial;
    Qry.ParamByName('Fantasia').AsString         :=Self.F_Fantasia;
    Qry.ParamByName('endereco').AsString         :=Self.F_endereco;
    Qry.ParamByName('cidade').AsString           :=Self.F_cidade;
    Qry.ParamByName('bairro').AsString           :=Self.F_bairro;
    Qry.ParamByName('estado').AsString           :=Self.F_estado;
    Qry.ParamByName('cep').AsString              :=Self.F_cep;
    Qry.ParamByName('telefone1').AsString        :=Self.F_telefone1;
    Qry.ParamByName('Telefone2').AsString        := Self.F_telefone2;
    Qry.ParamByName('Nome').AsString             :=Self.F_Nome;
    Qry.ParamByName('Numero').AsInteger          :=Self.F_Numero;
    Qry.ParamByName('email').AsString            :=Self.F_email;
    Qry.ParamByname('cnpj').AsString        :=Self.CNPJ;

    Try
      ConexaoDB.StartTransaction;
      Qry.ExecSQL;
      ConexaoDB.Commit;
    Except
      ConexaoDB.Rollback;
      Result:=false;
    End;

  finally
    if Assigned(Qry) then
       FreeAndNil(Qry);
  end;
end;

function TFornecedor.Selecionar(id: Integer): Boolean;
var Qry:TZQuery;
begin
  try
    Result:=true;
    Qry:=TZQuery.Create(nil);
    Qry.Connection:=ConexaoDB;
    Qry.SQL.Clear;
    Qry.SQL.Add('SELECT FORN_Cod,'+
                '       Forn_RAZAOSOCIAL, '+
                '       FORN_FANTASIA '+
                '       FORN_Logradouro, '+
                '       FORN_Cidade, '+
                '       FORN_Bairro, '+
                '       FORN_UF, '+
                '       FORN_Cep, '+
                '       FORN_Telefone1, '+
                '       FORN_Telefone2, '+
                '       FORN_Nome, '+
                '       FORN_Numero'+
                '       FORN_Email' +
                '  FROM FORNECEDOR '+
                ' WHERE FORN_Cod=:FORN_Cod');
    Qry.ParamByName('FORN_Cod').AsInteger:=id;
    Try
      Qry.Open;

      Self.F_CodEmpresa    := Qry.FieldByName('FORN_Cod').AsInteger;
      Self.F_RazaoSocial   := Qry.FieldByName('Forn_RAZAOSOCIAL').AsString;
      Self.F_Fantasia      := Qry.FieldByName('FORN_FANTASIA').AsString;
      Self.F_endereco      := Qry.FieldByName('FORN_Logradouro').AsString;
      Self.F_cidade        := Qry.FieldByName('FORN_Cidade').AsString;
      Self.F_bairro        := Qry.FieldByName('FORN_Bairro').AsString;
      Self.F_estado        := Qry.FieldByName('FORN_UF').AsString;
      Self.F_cep           := Qry.FieldByName('FORN_Cep').AsString;
      Self.F_telefone1     := Qry.FieldByName('FORN_Telefone1').AsString;
      Self.F_telefone2     := Qry.FieldByName('FORN_Telefone2').AsString;
      Self.F_nome          := Qry.FieldByName('FORN_Nome').AsString;
      Self.F_Numero        := Qry.FieldByName('FORN_Numero').AsInteger;
      Self.F_email         := Qry.ParamByName('FORN_Email').AsString;

    Except
      Result:=false;
    End;

  finally
    if Assigned(Qry) then
       FreeAndNil(Qry);
  end;
end;
{$endregion}


end.
